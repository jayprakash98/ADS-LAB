package com.jay.linkedList;

public class Main {
    public static void main(String[] args) {
//        LL list=new LL();
//        list.insertFirst(3);
//        list.insertFirst(4);
//        list.insertFirst(5);
//        list.insertFirst(6);
//        list.insertFirst(6);
//        list.insertFirst(6);
//        list.insertLast(99);
//        list.display();
//        System.out.println("deleted head element is :"+list.deleteHead());
//        list.display();
//        System.out.println("deleted tail element is "+list.deleteTail());
//        list.display();
//
//        System.out.println("deleted index element is;"+list.deleteIndex(3));
//        list.display();
////        list.deleteHead();
////        list.display();

        DLL list=new DLL();
        list.insertFirst(3);
        list.insertFirst(4);
        list.insertFirst(5);
        list.insertFirst(28);
        list.insertFirst(17);
        list.insertFirst(11);
        list.insertLast(99);
        list.display();

     }
}






//linked list

package com.jay.linkedList;

public class LL {
    private Node head;
    private Node tail;
    private int size;
    public LL(){
        this.size=0;
    }

    private class Node {
        private int value;
        private Node next;

        public Node(int value){
            this.value=value;
        }
        public Node(int value,Node next){
            this.value=value;
            this.next=next;
        }

    }

    public void insertFirst(int value){
        Node node=new Node(value);
        node.next=head;
        head=node;
        if(tail==null){
            tail=head;
        }
        size++;
    }

    public void insertLast(int value){
        if(tail==null){
            insertFirst(value);
        }
        Node node=new Node(value);
        tail.next=node;
        tail=node;
        size++;

    }

    public void insetIndex(int value,int index){
        if(index==0){
            insertFirst(value);
        }
        if(index==size){
            insertLast(value);
        }
        Node temp=head;
        for (int index1 = 1; index1 <index ; index1++) {
            temp=temp.next;
        }
        temp.next= new Node(value,temp.next);
        size++;
    }
    public int deleteHead(){
        int val=head.value;
        head=head.next;
        if(head==null){
            tail=null;
        }
        size--;
        return val;

    }

    public int deleteTail(){
        if(size<=1){
            return deleteHead();
        }
        Node secondLast=get(size-2);
        int val=tail.value;
        tail=secondLast;
        tail.next=null;
        return val;
    }
    public int deleteIndex(int index){
        Node prev=get(index-1);
        int val=prev.next.value;
        prev.next=prev.next.next;
        return val;

    }

    public Node get(int index1){
        Node node =head;
        for (int index= 0; index < index1; index++) {
            node = node.next;
        }
        return node;

    }

    public void display(){
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.value+"->");
            temp=temp.next;
        }
        System.out.println("end");
    }




}








//doubly linked list


package com.jay.linkedList;

public class DLL {
    private Node head;
    public void  insertFirst(int val){
        Node node=new Node(val);
        node.next=head;
        node.prev=null;
        if(head!=null){
            head.prev=node;
        }
        head=node;

    }

    public void insertLast(int value){
        Node node=new Node(value);
        Node last=head;
        Node next=null;
        if(head==null){
            node.prev=null;
            head=node;
            return;

        }
        while(last.next!=null){
            last=last.next;
        }
        last.next=node;
        node.prev=last;


    }

    public void display(){
//        below node is acting as like temporary variable
        Node node=head;
        Node last=null;
        while(node!=null){
            System.out.print(node.val+"->");
            last=node;
            node=node.next;
        }
        System.out.println("End");
        System.out.println("print in rev: ");
        while(last!=null){
            System.out.print(last.val+"->");
            last=last.prev;

        }
        System.out.println("START");
    }



    private class Node{
        private int val;
        private Node next;
        private Node prev;

        public Node(int value){
            this.val=value;
        }

        public Node(int value,Node next,Node prev){
            this.val=value;
            this.next=next;
            this.next=prev;
        }
    }

}




